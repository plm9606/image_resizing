AWSTemplateFormatVersion: 2010-09-09
Description: The AWS CloudFormation template for image resizing pipeline
Parameters:
  BucketPrefix:
    Type: String
    Default: aram-image-resize
Resources:
  ResizedImageBucket:
    Type: "AWS::S3::Bucket"
    DependsOn: LambdaPermission
    Properties:
      BucketName: !Sub "${BucketPrefix}"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: "images/"
            Function: !GetAtt ResizingLambdaFunction.Arn
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #     - ServerSideEncryptionByDefault:
      #         SSEAlgorithm: AES256
  ResizedImageBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ResizedImageBucket
      PolicyDocument:
        Statement:
          - Action: "s3:*"
            Effect: Allow
            Principal: "*"
            Resource:
              - !Join
                - ""
                - - "arn:"
                  - "aws"
                  - ":s3:::"
                  - !Ref ResizedImageBucket
                  - /images/*
            Condition:
              Bool:
                "aws:SecureTransport": false
  ImageResizeLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/aram-image-resize
  IamRoleLambdaExecution:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LogAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                Resource:
                  - !GetAtt ImageResizeLogGroup.Arn
              - Effect: Allow
                Action:
                  - "logs:PutLogEvents"
                Resource:
                  - arn:aws:logs:ap-northeast-2:071376413311:log-group:/aws/lambda/imageresizetest-dev*:*
        - PolicyName: S3FullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "arn:aws:s3:::aram-image-resize/*"
      Path: /
      RoleName: !Join
        - "-"
        - - aram-image-resize-test
          - dev
          - ap-northeast-2
  ResizingLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: image-resizing-test-nbbangdev
        S3Key: lambda/image-resize.zip
      FunctionName: aram-image-resize
      Handler: ./.build/src/index.resize
      MemorySize: 1024
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${BucketPrefix}"
    DependsOn:
      - ImageResizeLogGroup
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ResizingLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${BucketPrefix}"
      SourceAccount: !Ref "AWS::AccountId"
  # LambdaTrigger:
  #   Type: 'Custom::LambdaTrigger'
  #   DependsOn: LambdaPermission
  #   Properties:
  #     ServiceToken: !GetAtt ResizingLambdaFunction.Arn
  #     LambdaArn:

Outputs:
  ResizedImageBucketName:
    Value: !Ref ResizedImageBucket
  ImageResizeLogGroupName:
    Value: !Ref ImageResizeLogGroup
  ResizingLambdaFunctionName:
    Value: !Ref ResizingLambdaFunction
